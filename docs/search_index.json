[["index.html", "Data Management for 2022 Box Elder County and Cassia County Sagebrush-Obligate Songbird Surveys Chapter 1 Introduction 1.1 Building the Database 1.2 Visualizing Database Structure", " Data Management for 2022 Box Elder County and Cassia County Sagebrush-Obligate Songbird Surveys Rory Eggleston 2023-03-20 Chapter 1 Introduction To examine how sagebrush-obligate songbirds (SOBS) respond to habitat changes and recovery associated with wildfires, we collected point count data on SOBS in northwest Utah and south-central Idaho across 30 pairs of burned and control plots. Data was collected in a single data collection form using Survey123. Each plot was 1km x 1km and contained a minimum of 10 equally-spaced points that were 125m from the plot border and 250m from each other point. The data collection form was structured such that every new form constituted a new visit to a specific 1km plot. Within that form, observers added a nested point form for each point surveyed. Within each point, each observation of individual or large groups of birds was added. As such, there were three levels of data collected: each visit to each site, the points within each of those visits, and the observations at each of those points. Survey123 generated a unique global ID field for each row in each of these levels, and these global IDs are used to link points to each visit and observations to each point and each visit. 1.1 Building the Database To begin, I first created a database file using RSQLite: sobs_db &lt;- dbConnect(RSQLite::SQLite(), &quot;/Users/roryeggleston/Documents/WILD6900_DataScience/Sobs_DataManagement/code/sobs.db&quot;) I started building the database by creating a table for the visit-level data using the following code: dbExecute(sobs_db, &quot;CREATE TABLE sobs_survey ( global_id_plot text NOT NULL, date_and_start_time_plot text, observer_plot text, transect_id text, visit char(2), plot_type varchar(20), burn_category text, sky_start char(1), sky_end char(1), wind_start char(1), wind_end char(1), start_temp varchar(3), end_temp varchar(3), creation_date_plot text, creator_plot text, edit_date_plot text, editor_plot text, lat_plot double, long_plot double, utm_easting_plot double, utm_northing_plot double, utm_zone_plot char(2), PRIMARY KEY (global_id_plot) );&quot;) Very little of the visit-level data is numeric, so I opted to store most fields as text or characters, with the exception of coordinates. The global ID of the plot visit is the primary key for this table. I populated the table as follows, first reading in the CSV document, checking the column names, and then writing the data into the newly-created table: sobs_survey &lt;- read.csv(&quot;/Users/roryeggleston/Documents/WILD6900_DataScience/Sobs_DataManagement/data/Sobs_Survey_2022_Editable.csv&quot;, stringsAsFactors = FALSE) names(sobs_survey) dbWriteTable(sobs_db, &quot;sobs_survey&quot;, sobs_survey, append = TRUE) I then made sure that all of this had run correctly: dbGetQuery(sobs_db, &quot;SELECT * FROM sobs_survey LIMIT 10;&quot;) It did, so I proceeded to created a table for the point-level data, read in the associated CSV, write it to the new table, and check that it had worked: dbExecute(sobs_db, &quot;CREATE TABLE sobs_point ( global_id_point text NOT NULL, point text, start_time_at_point text, private_property varchar(3), cliff_rock varchar(3), cheatgrass_present varchar(3), why_no_survey text, global_id_plot text NOT NULL, creation_date_point text, creator_point text, edit_date_point text, editor_point text, area_burned varchar(3), percent_burned integer, point_notes_pt text, lat_point double, long_point double, utm_easting_point double, utm_northing_point double, utm_zone_point char(2), PRIMARY KEY (global_id_point), FOREIGN KEY (global_id_plot) REFERENCES sobs_survey(global_id_plot) );&quot;) sobs_point &lt;- read.csv(&quot;/Users/roryeggleston/Documents/WILD6900_DataScience/Sobs_DataManagement/data/Sobs_Point_2022_Editable.csv&quot;, stringsAsFactors = FALSE) names(sobs_point) dbWriteTable(sobs_db, &quot;sobs_point&quot;, sobs_point, append = TRUE) dbGetQuery(sobs_db, &quot;SELECT * FROM sobs_point LIMIT 10;&quot;) For the point-level data, the primary key is the global id for the point data, and the foreign key linking each visit to its associated points is the global ID for the visit-level data. Apart from percentages and coordinates, most of this data is categorical, and so it stored as text or characters. The point-level data table worked, so I ran through the same procedures for the observation-level data: dbExecute(sobs_db, &quot;CREATE TABLE sobs_obs ( global_id_obs text, minute integer, species_code varchar(5), radial_distance integer, how_detected char(1), song_also varchar(3), sex char(1), visual_detection varchar(3), migrating varchar(3), point_notes_obs text, global_id_point text, creation_date_obs text, creator_obs text, edit_date_obs text, editor_obs text, bird_within_burn varchar(3), direction varchar(20), PRIMARY KEY (global_id_obs), FOREIGN KEY (global_id_point) REFERENCES sobs_point(global_id_point) );&quot;) sobs_obs &lt;- read.csv(&quot;/Users/roryeggleston/Documents/WILD6900_DataScience/Sobs_DataManagement/data/Sobs_Observations_2022_Editable.csv&quot;, stringsAsFactors = FALSE) names(sobs_obs) dbWriteTable(sobs_db, &quot;sobs_obs&quot;, sobs_obs, append = TRUE) dbGetQuery(sobs_db, &quot;SELECT * FROM sobs_obs LIMIT 10;&quot;) For the observation-level data, the observation global ID is the primary key, and the foreign key is the global ID for the point-level data. As bird species are initially collected as character data, most of the data in this table is again stored as text or characters. This table will need to be converted into a frequency table, but for now, this set-up will work. 1.2 Visualizing Database Structure Based on the code above, the database should be structured like this: Figure 1.1: 2022 SOBS Data Database Structure "],["hello-bookdown.html", "Chapter 2 Hello bookdown 2.1 A section", " Chapter 2 Hello bookdown All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. 2.1 A section All chapter sections start with a second-level (##) or higher heading followed by your section title, like the sections above and below here. You can have as many as you want within a chapter. An unnumbered section Chapters and sections are numbered by default. To un-number a heading, add a {.unnumbered} or the shorter {-} at the end of the heading, like in this section. "],["cross.html", "Chapter 3 Cross-references 3.1 Chapters and sub-chapters 3.2 Captioned figures and tables", " Chapter 3 Cross-references Cross-references make it easier for your readers to find and link to elements in your book. 3.1 Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter 3. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 3.2 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure 3.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 3.1: Here is a nice figure! Donâ€™t miss Table 3.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 3.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 "],["parts.html", "Chapter 4 Parts", " Chapter 4 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "Chapter 5 Footnotes and citations 5.1 Footnotes 5.2 Citations", " Chapter 5 Footnotes and citations 5.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 5.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2023) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 6 Blocks 6.1 Equations 6.2 Theorems and proofs 6.3 Callout blocks", " Chapter 6 Blocks 6.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 7 Sharing your book 7.1 Publishing 7.2 404 pages 7.3 Metadata for sharing", " Chapter 7 Sharing your book 7.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 7.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If youâ€™d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 7.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your bookâ€™s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your bookâ€™s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapterâ€™s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
